/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v0/notifications/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Notifications
     * @description List notifications with optional filters
     */
    get: operations['notifications_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/notifications/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Notification
     * @description Retrieve notification by id
     */
    get: operations['notifications_retrieve']
    /**
     * Put Notification
     * @description Update an existing notification by id
     */
    put: operations['notifications_update']
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Patch Notification
     * @description Partially update an existing notification by id
     */
    patch: operations['notifications_partial_update']
    trace?: never
  }
  '/v0/notifications/mark-all-as-read/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Mark all notifications as read
     * @description Marks all notifications for the current user as read
     */
    post: operations['notifications_mark_all_as_read_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/post-categories/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Post Categories
     * @description List post categories with optional filters
     */
    get: operations['post_categories_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/post-categories/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Post Category
     * @description Retrieve post category by id
     */
    get: operations['post_categories_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/post-comments/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Post Comments
     * @description List post comments with optional filters
     */
    get: operations['post_comments_list']
    put?: never
    /**
     * Create Post Comment
     * @description Create a new post comment
     */
    post: operations['post_comments_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/post-comments/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Post Comment
     * @description Retrieve post comment by id
     */
    get: operations['post_comments_retrieve']
    /**
     * Put Post Comment
     * @description Update an existing post comment by id
     */
    put: operations['post_comments_update']
    post?: never
    /**
     * Delete Post Comment
     * @description Delete an existing Post Comment by id
     */
    delete: operations['post_comments_destroy']
    options?: never
    head?: never
    /**
     * Patch Post Comment
     * @description Partially update an existing post comment by id
     */
    patch: operations['post_comments_partial_update']
    trace?: never
  }
  '/v0/post-comments/{id}/downvote/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Downvote Post Comment
     * @description Cast an up vote to a post comment by id
     */
    post: operations['post_comments_downvote_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/post-comments/{id}/unvote/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Remove Post Comment Vote
     * @description Remove vote from post comment by id
     */
    post: operations['post_comments_unvote_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/post-comments/{id}/upvote/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Upvote Post Comment
     * @description Cast a down vote to a post comment by id
     */
    post: operations['post_comments_upvote_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/post-tags/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Post Tags
     * @description List post tags with optional filters
     */
    get: operations['post_tags_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/post-tags/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Post Tag
     * @description Retrieve post tag by id
     */
    get: operations['post_tags_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/posts/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Posts
     * @description List posts with optional filters
     */
    get: operations['posts_list']
    put?: never
    /**
     * Create Post
     * @description Create a new post
     */
    post: operations['posts_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/posts/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Post
     * @description Retrieve post by id
     */
    get: operations['posts_retrieve']
    put?: never
    post?: never
    /**
     * Delete Post
     * @description Delete an existing Post by id
     */
    delete: operations['posts_destroy']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/posts/{id}/bookmark/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bookmark Post
     * @description Bookmark an post by id
     */
    post: operations['posts_bookmark_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/posts/{id}/downvote/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Downvote Post
     * @description Cast an up vote to a post by id
     */
    post: operations['posts_downvote_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/posts/{id}/unbookmark/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Remove Post Bookmark
     * @description Remove bookmark from post by id
     */
    post: operations['posts_unbookmark_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/posts/{id}/unvote/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Remove Post Vote
     * @description Remove vote from post by id
     */
    post: operations['posts_unvote_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/posts/{id}/upvote/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Upvote Post
     * @description Cast a down vote to a post by id
     */
    post: operations['posts_upvote_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/users/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List Users
     * @description List users with optional filters
     */
    get: operations['users_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/users/{id}/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve User
     * @description Retrieve user by id
     */
    get: operations['users_retrieve']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v0/users/me/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve Me
     * @description Retrieve the current user
     */
    get: operations['users_me_retrieve']
    /**
     * Put Me
     * @description Update the current user
     */
    put: operations['users_me_update']
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Patch Me
     * @description Partially update the current user
     */
    patch: operations['users_me_partial_update']
    trace?: never
  }
  '/v0/users/me/complete-signup/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Complete Signup
     * @description Complete the signup process for the current user
     */
    post: operations['users_me_complete_signup_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * @description * `RELAXED` - Relaxed
     *     * `NORMAL` - Normal
     *     * `COMPACT` - Compact
     * @enum {string}
     */
    CardStyleEnum: 'RELAXED' | 'NORMAL' | 'COMPACT'
    /**
     * @description * `LIKE` - Like
     *     * `COMMENT` - Comment
     *     * `COMMENT_MENTION` - Comment Mention
     * @enum {string}
     */
    EventEnum: 'LIKE' | 'COMMENT' | 'COMMENT_MENTION'
    Forbidden: {
      detail: string
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    Notification: {
      /** Format: uuid */
      readonly id: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      /**
       * Format: uuid
       * @description User who received this notification.
       */
      readonly user: string
      /** @description Event Type
       *
       *     * `LIKE` - Like
       *     * `COMMENT` - Comment
       *     * `COMMENT_MENTION` - Comment Mention */
      readonly event: components['schemas']['EventEnum']
      /** @description Description of the notification. This is what the users will see. */
      readonly description: string
      /** @description Whether the notification has been read or not. */
      is_read?: boolean
      readonly object_of_interest: components['schemas']['NotificationObjectOfInterest']
      readonly object_of_interest_type: components['schemas']['ObjectOfInterestTypeEnum']
    }
    NotificationError: {
      readonly id: string[]
      readonly created_at: string[]
      readonly updated_at: string[]
      readonly user: string[]
      readonly event: string[]
      readonly description: string[]
      readonly is_read: string[]
      readonly object_of_interest: string[]
      readonly object_of_interest_type: string[]
      readonly non_field_errors: string[]
    }
    NotificationObjectOfInterest: components['schemas']['Post'] | components['schemas']['PostComment']
    NotificationObjectOfInterestRequest:
      | components['schemas']['PostRequest']
      | components['schemas']['PostCommentRequest']
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    NotificationRequest: {
      /** @description Whether the notification has been read or not. */
      is_read?: boolean
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    NotificationUpdateRequest: {
      /** @description Whether the notification has been read or not. */
      is_read?: boolean
    }
    /** @enum {unknown} */
    NullEnum: null
    /**
     * @description * `Post` - Post
     *     * `PostComment` - PostComment
     * @enum {string}
     */
    ObjectOfInterestTypeEnum: 'Post' | 'PostComment'
    PaginatedNotificationList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['Notification'][]
    }
    PaginatedPostCategoryList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['PostCategory'][]
    }
    PaginatedPostCommentList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['PostComment'][]
    }
    PaginatedPostList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['Post'][]
    }
    PaginatedPostTagList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['PostTag'][]
    }
    PaginatedPublicUserList: {
      /**
       * @description Total number of items available.
       * @example 1102
       */
      count: number
      /**
       * @description Number of results to return per page.
       * @example 100
       */
      page_size: number
      /**
       * @description Total number of pages.
       * @example 17
       */
      total_pages: number
      results: components['schemas']['PublicUser'][]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PatchedNotificationUpdateRequest: {
      /** @description Whether the notification has been read or not. */
      is_read?: boolean
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PatchedPostCommentUpdateRequest: {
      /** @description The actual comment as JSON. */
      body?: unknown
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PatchedUserRequest: {
      /**
       * Format: binary
       * @description Image(jpeg, jpg, png, gif, webp) in base64 format
       */
      avatar?: string | null
      first_name?: string
      last_name?: string
      /**
       * @description User's card style.
       *
       *     * `RELAXED` - Relaxed
       *     * `NORMAL` - Normal
       *     * `COMPACT` - Compact
       * @default NORMAL
       */
      card_style: components['schemas']['CardStyleEnum']
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    Post: {
      /** Format: uuid */
      readonly id: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      /**
       * Format: uuid
       * @description User who posted this post.
       */
      readonly user: string
      /**
       * Format: uuid
       * @description The very first instance of this post in our system, if null, it means this is the initial
       */
      readonly initial: string | null
      /** @description Title of the post. */
      title: string
      /**
       * Format: uri
       * @description Image(jpeg, jpg, png, gif, webp) in base64 format
       */
      image: string
      /**
       * Format: uri
       * @description Verified original source of this post.
       */
      original_source?: string | null
      /** @description Whether this post is made by the user uploading it or not. */
      is_original?: boolean
      /** @description Whether this post is a repost or not. */
      readonly is_repost: boolean
      /** Is NSFW? */
      is_nsfw?: boolean
      /**
       * Format: uuid
       * @description Category of the post.
       */
      category?: string | null
      tags: string[]
      readonly vote: (components['schemas']['VoteEnum'] | components['schemas']['NullEnum']) | null
      readonly bookmarked: boolean
      readonly positive_vote_count: number | null
      readonly negative_vote_count: number | null
      readonly comment_count: number | null
      readonly comments: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PostCategory: {
      /** Format: uuid */
      readonly id: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      /** @description Name of the category. */
      readonly name: string
      /**
       * Slug/Handle
       * @description Slug/Handle of the category.
       */
      readonly handle: string
      /** @description Icon for the category, in svg format. */
      readonly icon: string
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PostComment: {
      /** Format: uuid */
      readonly id: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      /**
       * Format: uuid
       * @description User who wrote this comment.
       */
      readonly user: string
      /**
       * Format: uuid
       * @description The post this comment is for.
       */
      post: string
      /** @description The actual comment as JSON. */
      body: unknown
      readonly vote: (components['schemas']['VoteEnum'] | components['schemas']['NullEnum']) | null
      readonly positive_vote_count: number | null
      readonly negative_vote_count: number | null
    }
    PostCommentDestroyError: {
      protected_elements: components['schemas']['ProtectedElement'][]
    }
    PostCommentError: {
      readonly id: string[]
      readonly created_at: string[]
      readonly updated_at: string[]
      readonly user: string[]
      readonly post: string[]
      readonly body: string[]
      readonly vote: string[]
      readonly positive_vote_count: string[]
      readonly negative_vote_count: string[]
      readonly non_field_errors: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PostCommentRequest: {
      /**
       * Format: uuid
       * @description The post this comment is for.
       */
      post: string
      /** @description The actual comment as JSON. */
      body: unknown
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PostCommentUpdateRequest: {
      /** @description The actual comment as JSON. */
      body: unknown
    }
    PostDestroyError: {
      protected_elements: components['schemas']['ProtectedElement'][]
    }
    PostError: {
      readonly id: string[]
      readonly created_at: string[]
      readonly updated_at: string[]
      readonly user: string[]
      readonly initial: string[]
      readonly title: string[]
      readonly image: string[]
      readonly original_source: string[]
      readonly is_original: string[]
      readonly is_repost: string[]
      readonly is_nsfw: string[]
      readonly category: string[]
      readonly tags: string[]
      readonly vote: string[]
      readonly bookmarked: string[]
      readonly positive_vote_count: string[]
      readonly negative_vote_count: string[]
      readonly comment_count: string[]
      readonly comments: string[]
      readonly non_field_errors: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PostRequest: {
      /** @description Title of the post. */
      title: string
      /**
       * Format: binary
       * @description Image(jpeg, jpg, png, gif, webp) in base64 format
       */
      image: string
      /**
       * Format: uri
       * @description Verified original source of this post.
       */
      original_source?: string | null
      /** @description Whether this post is made by the user uploading it or not. */
      is_original?: boolean
      /** Is NSFW? */
      is_nsfw?: boolean
      /**
       * Format: uuid
       * @description Category of the post.
       */
      category?: string | null
      tags: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PostTag: {
      /** Format: uuid */
      readonly id: string
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      name: string
    }
    ProtectedElement: {
      /** Format: uuid */
      readonly id: string
      readonly type: string
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    PublicUser: {
      /** Format: uuid */
      readonly id: string
      /** @description Required. 150 characters or fewer. It must start with a lowercase letter and contain only lowercase letters, digits, or underscores. */
      readonly username: string
      /**
       * Format: uri
       * @description User's avatar image.
       */
      readonly avatar: string | null
      /**
       * Active
       * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
       */
      readonly is_active: boolean
      /** Format: date-time */
      readonly date_joined: string
      /** Format: date-time */
      readonly last_login: string | null
      /**
       * Staff status
       * @description Designates whether the user can log into this admin site.
       */
      readonly is_staff: boolean
      /**
       * Superuser status
       * @description Designates that this user has all permissions without explicitly assigning them.
       */
      readonly is_superuser: boolean
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    User: {
      /** Format: uuid */
      readonly id: string
      /** @description Required. 150 characters or fewer. It must start with a lowercase letter and contain only lowercase letters, digits, or underscores. */
      readonly username: string
      /**
       * Format: uri
       * @description Image(jpeg, jpg, png, gif, webp) in base64 format
       */
      avatar?: string | null
      first_name?: string
      last_name?: string
      /**
       * Email address
       * Format: email
       */
      readonly email: string
      /**
       * Active
       * @description Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
       */
      readonly is_active: boolean
      /** Format: date-time */
      readonly date_joined: string
      /** Format: date-time */
      readonly last_login: string | null
      /**
       * Staff status
       * @description Designates whether the user can log into this admin site.
       */
      readonly is_staff: boolean
      /**
       * Superuser status
       * @description Designates that this user has all permissions without explicitly assigning them.
       */
      readonly is_superuser: boolean
      /** Format: date-time */
      readonly created_at: string
      /** Format: date-time */
      readonly updated_at: string
      readonly signup_completed: string
      /**
       * @description User's card style.
       *
       *     * `RELAXED` - Relaxed
       *     * `NORMAL` - Normal
       *     * `COMPACT` - Compact
       * @default NORMAL
       */
      card_style: components['schemas']['CardStyleEnum']
    }
    UserCompleteSignupError: {
      readonly username: string[]
      readonly password: string[]
      readonly non_field_errors: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    UserCompleteSignupRequest: {
      /** @description Required. 150 characters or fewer. It must start with a lowercase letter and contain only lowercase letters, digits, or underscores. */
      username: string
      password: string
    }
    UserError: {
      readonly id: string[]
      readonly username: string[]
      readonly avatar: string[]
      readonly first_name: string[]
      readonly last_name: string[]
      readonly email: string[]
      readonly is_active: string[]
      readonly date_joined: string[]
      readonly last_login: string[]
      readonly is_staff: string[]
      readonly is_superuser: string[]
      readonly created_at: string[]
      readonly updated_at: string[]
      readonly signup_completed: string[]
      readonly card_style: string[]
      readonly non_field_errors: string[]
    }
    /** @description Serializes the nested field, doesn't turn the serializer into read-only automatically(should it?) but it is
     *     read only.
     *
     *     GET /api/v1/people/5/
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [7]
     *     }
     *
     *     GET /api/v1/people/5/?include=labels
     *     {
     *         "id": 5,
     *         "first_name": "John",
     *         "last_name": "Doe",
     *         "labels": [
     *             {
     *                 "id": 7,
     *                 "name": "label-name"
     *             }
     *         ]
     *     } */
    UserRequest: {
      /**
       * Format: binary
       * @description Image(jpeg, jpg, png, gif, webp) in base64 format
       */
      avatar?: string | null
      first_name?: string
      last_name?: string
      /**
       * @description User's card style.
       *
       *     * `RELAXED` - Relaxed
       *     * `NORMAL` - Normal
       *     * `COMPACT` - Compact
       * @default NORMAL
       */
      card_style: components['schemas']['CardStyleEnum']
    }
    /**
     * @description * `1` - Upvote
     *     * `-1` - Downvote
     * @enum {integer}
     */
    VoteEnum: 1 | -1
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  notifications_list: {
    parameters: {
      query?: {
        created_at?: string
        created_at__gt?: string
        created_at__gte?: string
        created_at__lt?: string
        created_at__lte?: string
        /** @description Event Type
         *
         *     * `LIKE` - Like
         *     * `COMMENT` - Comment
         *     * `COMMENT_MENTION` - Comment Mention */
        event?: 'COMMENT' | 'COMMENT_MENTION' | 'LIKE'
        include?: string
        is_read?: boolean
        ordering?: '-created_at' | '-updated_at' | 'created_at' | 'updated_at'
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
        updated_at?: string
        updated_at__gt?: string
        updated_at__gte?: string
        updated_at__lt?: string
        updated_at__lte?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedNotificationList']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  notifications_retrieve: {
    parameters: {
      query?: {
        include?: string
      }
      header?: never
      path: {
        /** @description A UUID string identifying this Notification. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Notification']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  notifications_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Notification. */
        id: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['NotificationUpdateRequest']
        'application/x-www-form-urlencoded': components['schemas']['NotificationUpdateRequest']
        'multipart/form-data': components['schemas']['NotificationUpdateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Notification']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  notifications_partial_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Notification. */
        id: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedNotificationUpdateRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedNotificationUpdateRequest']
        'multipart/form-data': components['schemas']['PatchedNotificationUpdateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Notification']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  notifications_mark_all_as_read_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['NotificationRequest']
        'application/x-www-form-urlencoded': components['schemas']['NotificationRequest']
        'multipart/form-data': components['schemas']['NotificationRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            message?: string
          }
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            detail?: string
          }
        }
      }
    }
  }
  post_categories_list: {
    parameters: {
      query?: {
        include?: string
        ordering?: '-created_at' | '-updated_at' | 'created_at' | 'updated_at'
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedPostCategoryList']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  post_categories_retrieve: {
    parameters: {
      query?: {
        include?: string
      }
      header?: never
      path: {
        /** @description A UUID string identifying this Post Category. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostCategory']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  post_comments_list: {
    parameters: {
      query?: {
        created_at?: string
        created_at__gt?: string
        created_at__gte?: string
        created_at__lt?: string
        created_at__lte?: string
        include?: 'post' | 'user' | 'user,post'
        negative_vote_count?: number
        negative_vote_count__gt?: number
        negative_vote_count__gte?: number
        negative_vote_count__lt?: number
        negative_vote_count__lte?: number
        ordering?:
          | '-created_at'
          | '-negative_vote_count'
          | '-positive_vote_count'
          | '-updated_at'
          | 'created_at'
          | 'negative_vote_count'
          | 'positive_vote_count'
          | 'updated_at'
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        positive_vote_count?: number
        positive_vote_count__gt?: number
        positive_vote_count__gte?: number
        positive_vote_count__lt?: number
        positive_vote_count__lte?: number
        post?: string
        /** @description A search term. */
        search?: string
        updated_at?: string
        updated_at__gt?: string
        updated_at__gte?: string
        updated_at__lt?: string
        updated_at__lte?: string
        user?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedPostCommentList']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  post_comments_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PostCommentRequest']
        'application/x-www-form-urlencoded': components['schemas']['PostCommentRequest']
        'multipart/form-data': components['schemas']['PostCommentRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostComment']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostCommentError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  post_comments_retrieve: {
    parameters: {
      query?: {
        include?: 'post' | 'user' | 'user,post'
      }
      header?: never
      path: {
        /** @description A UUID string identifying this Post Comment. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostComment']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  post_comments_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post Comment. */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PostCommentUpdateRequest']
        'application/x-www-form-urlencoded': components['schemas']['PostCommentUpdateRequest']
        'multipart/form-data': components['schemas']['PostCommentUpdateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostComment']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostCommentError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  post_comments_destroy: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post Comment. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostCommentDestroyError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  post_comments_partial_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post Comment. */
        id: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedPostCommentUpdateRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedPostCommentUpdateRequest']
        'multipart/form-data': components['schemas']['PatchedPostCommentUpdateRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostComment']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostCommentError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  post_comments_downvote_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post Comment. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  post_comments_unvote_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post Comment. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  post_comments_upvote_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post Comment. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  post_tags_list: {
    parameters: {
      query?: {
        include?: string
        ordering?: '-created_at' | '-updated_at' | 'created_at' | 'updated_at'
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        /** @description A search term. */
        search?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedPostTagList']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  post_tags_retrieve: {
    parameters: {
      query?: {
        include?: string
      }
      header?: never
      path: {
        /** @description A UUID string identifying this Post Tag. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostTag']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  posts_list: {
    parameters: {
      query?: {
        bookmarked?: boolean
        category?: string
        category__handle?: string
        category__isnull?: boolean
        comment_count?: number
        comment_count__gt?: number
        comment_count__gte?: number
        comment_count__lt?: number
        comment_count__lte?: number
        created_at?: string
        created_at__gt?: string
        created_at__gte?: string
        created_at__lt?: string
        created_at__lte?: string
        include?:
          | 'category'
          | 'category,comments'
          | 'comments'
          | 'tags'
          | 'tags,category'
          | 'tags,category,comments'
          | 'tags,comments'
          | 'tags,user'
          | 'tags,user,category'
          | 'tags,user,category,comments'
          | 'tags,user,comments'
          | 'user'
          | 'user,category'
          | 'user,category,comments'
          | 'user,comments'
        is_nsfw?: boolean
        is_original?: boolean
        is_repost?: boolean
        negative_vote_count?: number
        negative_vote_count__gt?: number
        negative_vote_count__gte?: number
        negative_vote_count__lt?: number
        negative_vote_count__lte?: number
        ordering?:
          | '-comment_count'
          | '-created_at'
          | '-negative_vote_count'
          | '-positive_vote_count'
          | '-updated_at'
          | 'comment_count'
          | 'created_at'
          | 'negative_vote_count'
          | 'positive_vote_count'
          | 'updated_at'
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        positive_vote_count?: number
        positive_vote_count__gt?: number
        positive_vote_count__gte?: number
        positive_vote_count__lt?: number
        positive_vote_count__lte?: number
        /** @description A search term. */
        search?: string
        tags?: string[]
        tags__isnull?: boolean
        title?: string
        updated_at?: string
        updated_at__gt?: string
        updated_at__gte?: string
        updated_at__lt?: string
        updated_at__lte?: string
        user?: string
        user__username?: string
        /** @description * `1` - Upvote
         *     * `-1` - Downvote */
        vote?: -1 | 1
        vote__isnull?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedPostList']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  posts_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PostRequest']
        'application/x-www-form-urlencoded': components['schemas']['PostRequest']
        'multipart/form-data': components['schemas']['PostRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Post']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  posts_retrieve: {
    parameters: {
      query?: {
        include?:
          | 'category'
          | 'category,comments'
          | 'comments'
          | 'tags'
          | 'tags,category'
          | 'tags,category,comments'
          | 'tags,comments'
          | 'tags,user'
          | 'tags,user,category'
          | 'tags,user,category,comments'
          | 'tags,user,comments'
          | 'user'
          | 'user,category'
          | 'user,category,comments'
          | 'user,comments'
      }
      header?: never
      path: {
        /** @description A UUID string identifying this Post. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Post']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  posts_destroy: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostDestroyError']
        }
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Forbidden']
        }
      }
    }
  }
  posts_bookmark_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  posts_downvote_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  posts_unbookmark_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  posts_unvote_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  posts_upvote_create: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A UUID string identifying this Post. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No response body */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  users_list: {
    parameters: {
      query?: {
        created_at?: string
        created_at__gt?: string
        created_at__gte?: string
        created_at__lt?: string
        created_at__lte?: string
        include?: string
        is_active?: boolean
        is_staff?: boolean
        is_superuser?: boolean
        ordering?: '-created_at' | '-updated_at' | 'created_at' | 'updated_at'
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        page_size?: number
        post_comment_count?: number
        post_comment_count__gt?: number
        post_comment_count__gte?: number
        post_comment_count__lt?: number
        post_comment_count__lte?: number
        post_count?: number
        post_count__gt?: number
        post_count__gte?: number
        post_count__lt?: number
        post_count__lte?: number
        /** @description A search term. */
        search?: string
        updated_at?: string
        updated_at__gt?: string
        updated_at__gte?: string
        updated_at__lt?: string
        updated_at__lte?: string
        username?: string
        username__icontains?: string
        username__iexact?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedPublicUserList']
        }
      }
    }
  }
  users_retrieve: {
    parameters: {
      query?: {
        include?: string
      }
      header?: never
      path: {
        /** @description A UUID string identifying this User. */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PublicUser']
        }
      }
    }
  }
  users_me_retrieve: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
    }
  }
  users_me_update: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserRequest']
        'application/x-www-form-urlencoded': components['schemas']['UserRequest']
        'multipart/form-data': components['schemas']['UserRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserError']
        }
      }
    }
  }
  users_me_partial_update: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedUserRequest']
        'application/x-www-form-urlencoded': components['schemas']['PatchedUserRequest']
        'multipart/form-data': components['schemas']['PatchedUserRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserError']
        }
      }
    }
  }
  users_me_complete_signup_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCompleteSignupRequest']
        'application/x-www-form-urlencoded': components['schemas']['UserCompleteSignupRequest']
        'multipart/form-data': components['schemas']['UserCompleteSignupRequest']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserCompleteSignupError']
        }
      }
    }
  }
}
